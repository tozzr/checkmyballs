package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/pkg/errors"
	"github.com/tozzr/checkmyballs/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Animal)
// DB Table: Plural (animals)
// Resource: Plural (Animals)
// Path: Plural (/animals)
// View Template Folder: Plural (/templates/animals/)

// AnimalsResource is the resource for the Animal model
type AnimalsResource struct {
	buffalo.Resource
}

// List gets all Animals. This function is mapped to the path
// GET /animals
func (v AnimalsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	animals := &models.Animals{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Animals from the DB
	if err := q.Where("user_id = ?", c.Session().Get("current_user_id")).All(animals); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, animals))
}

// Show gets the data for one Animal. This function is mapped to
// the path GET /animals/{animal_id}
func (v AnimalsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Animal
	animal := &models.Animal{}

	// To find the Animal the parameter animal_id is used.
	if err := tx.Find(animal, c.Param("animal_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, animal))
}

// New renders the form for creating a new Animal.
// This function is mapped to the path GET /animals/new
func (v AnimalsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Animal{}))
}

// Create adds a Animal to the DB. This function is mapped to the
// path POST /animals
func (v AnimalsResource) Create(c buffalo.Context) error {
	// Allocate an empty Animal
	animal := &models.Animal{}

	// Bind animal to the html form elements
	if err := c.Bind(animal); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	if uid := c.Session().Get("current_user_id"); uid != nil {
		animal.UserID = uid.(uuid.UUID)
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(animal)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, animal))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Animal was created successfully")

	// and redirect to the animals index page
	return c.Render(201, r.Auto(c, animal))
}

// Edit renders a edit form for a Animal. This function is
// mapped to the path GET /animals/{animal_id}/edit
func (v AnimalsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Animal
	animal := &models.Animal{}

	if err := tx.Find(animal, c.Param("animal_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, animal))
}

// Update changes a Animal in the DB. This function is mapped to
// the path PUT /animals/{animal_id}
func (v AnimalsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Animal
	animal := &models.Animal{}

	if err := tx.Find(animal, c.Param("animal_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Animal to the html form elements
	if err := c.Bind(animal); err != nil {
		return errors.WithStack(err)
	}

	if uid := c.Session().Get("current_user_id"); uid != nil {
		animal.UserID = uid.(uuid.UUID)
	}

	verrs, err := tx.ValidateAndUpdate(animal)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, animal))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Animal was updated successfully")

	// and redirect to the animals index page
	return c.Render(200, r.Auto(c, animal))
}

// Destroy deletes a Animal from the DB. This function is mapped
// to the path DELETE /animals/{animal_id}
func (v AnimalsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Animal
	animal := &models.Animal{}

	// To find the Animal the parameter animal_id is used.
	if err := tx.Find(animal, c.Param("animal_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(animal); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Animal was destroyed successfully")

	// Redirect to the animals index page
	return c.Render(200, r.Auto(c, animal))
}
